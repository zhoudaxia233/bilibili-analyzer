import subprocess
from pathlib import Path
from rich import print as rprint


def ensure_bilibili_url(identifier: str) -> str:
    """If identifier is a BVID, assemble the full Bilibili video URL."""
    if (identifier.startswith("BV") or identifier.startswith("bv")) and len(
        identifier
    ) >= 12:
        return f"https://www.bilibili.com/video/{identifier}"
    return identifier


def download_with_ytdlp(
    url: str,
    output_path: str = None,
    download_type: str = "audio",
    credentials=None,
    browser=None,
):
    """Download media from a Bilibili video using yt-dlp.

    Args:
        url: Bilibili video URL
        output_path: Output path (optional)
        download_type: 'audio', 'subtitles', or 'all'
        credentials: Dictionary with 'sessdata', 'bili_jct', and 'buvid3' values for authentication
        browser: Browser to extract cookies from (e.g., 'chrome', 'firefox')
    """
    cmd = ["yt-dlp"]

    # Skip actual video/audio download if only subtitles are requested
    if download_type == "subtitles":
        cmd.append("--skip-download")

    # Add format specification based on download type
    if download_type in ["audio", "all"]:
        cmd.extend(["-f", "ba"])

    # Add subtitles option if requested
    if download_type in ["subtitles", "all"]:
        cmd.extend(["--write-subs", "--write-auto-subs", "--sub-langs", "all"])

    # Handle authentication
    if browser:
        # Use browser cookies directly (preferred method)
        cmd.extend(["--cookies-from-browser", browser])
        rprint(f"[cyan]Using cookies from {browser} browser for authentication[/cyan]")
    elif credentials:
        # Create a temporary cookie file if credentials are provided
        cookies_file = Path("temp_cookies.txt")

        # Format cookies in Netscape/Mozilla format
        cookie_content = [
            "# Netscape HTTP Cookie File",
            "# https://curl.se/docs/http-cookies.html",
            "# This file was generated by yt-dlp. Edit at your own risk.",
            "",
        ]

        # Add cookies in the required format
        domain = ".bilibili.com"
        for name, value in credentials.items():
            if name == "sessdata" and value:
                cookie_content.append(f"{domain}\tTRUE\t/\tTRUE\t0\tSESSDATA\t{value}")
            elif name == "bili_jct" and value:
                cookie_content.append(f"{domain}\tTRUE\t/\tTRUE\t0\tbili_jct\t{value}")
            elif name == "buvid3" and value:
                cookie_content.append(f"{domain}\tTRUE\t/\tTRUE\t0\tbuvid3\t{value}")

        # Write cookies to file
        with open(cookies_file, "w", encoding="utf-8") as f:
            f.write("\n".join(cookie_content))

        # Add cookies file to command
        cmd.extend(["--cookies", str(cookies_file)])
        rprint(f"[cyan]Using cookies for authentication with yt-dlp[/cyan]")

    # Add URL and output template if specified
    cmd.append(url)
    if output_path:
        cmd.extend(["-o", output_path])

    # Add verbose output for debugging
    cmd.append("-v")

    # Run the command
    try:
        rprint(f"[cyan]Running yt-dlp command: {' '.join(cmd)}[/cyan]")
        subprocess.run(cmd, check=True)
        rprint(f"[green]{download_type.capitalize()} download complete.[/green]")
    except subprocess.CalledProcessError as e:
        rprint(f"[red]yt-dlp download failed with error code {e.returncode}[/red]")
        raise
    finally:
        # Clean up temporary cookies file
        if credentials and not browser:
            cookies_file = Path("temp_cookies.txt")
            if cookies_file.exists():
                cookies_file.unlink()
