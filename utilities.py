import subprocess
from pathlib import Path
from rich import print as rprint
import tempfile
import os
from extract_cookies import get_bilibili_cookies


# Global cache for cookie files to avoid extracting them multiple times
_cookie_file_cache = {}


def ensure_bilibili_url(identifier: str) -> str:
    """If identifier is a BVID, assemble the full Bilibili video URL."""
    if (identifier.startswith("BV") or identifier.startswith("bv")) and len(
        identifier
    ) >= 12:
        return f"https://www.bilibili.com/video/{identifier}"
    return identifier


def get_browser_cookies(browser: str) -> str:
    """Get cookie file for the specified browser, creating it if necessary.

    Args:
        browser: Browser name ('chrome' or 'firefox')

    Returns:
        Path to the cookie file
    """
    global _cookie_file_cache

    # If cookie file already exists in cache, return it
    if browser in _cookie_file_cache and os.path.exists(_cookie_file_cache[browser]):
        return _cookie_file_cache[browser]

    # Extract cookies from browser
    rprint(
        f"[cyan]Extracting Bilibili cookies from {browser} (this only happens once)...[/cyan]"
    )
    cookies = get_bilibili_cookies(browser)

    if not cookies:
        rprint(
            "[red]No Bilibili cookies found. Please ensure you are logged into Bilibili in your browser.[/red]"
        )
        return None

    # Create temporary cookie file
    cookie_file = tempfile.NamedTemporaryFile(delete=False, suffix=".cookies", mode="w")

    # Format cookies in Netscape format
    cookie_content = [
        "# Netscape HTTP Cookie File",
        "# https://curl.se/docs/http-cookies.html",
        "# This file was generated by Bilibili analyzer. Edit at your own risk.",
        "",
    ]

    # Add cookies in the required format
    domain = ".bilibili.com"
    for name, value in cookies.items():
        if name == "SESSDATA" and value:
            cookie_content.append(f"{domain}\tTRUE\t/\tTRUE\t0\tSESSDATA\t{value}")
        elif name == "bili_jct" and value:
            cookie_content.append(f"{domain}\tTRUE\t/\tTRUE\t0\tbili_jct\t{value}")
        elif name == "buvid3" and value:
            cookie_content.append(f"{domain}\tTRUE\t/\tTRUE\t0\tbuvid3\t{value}")

    # Write cookies to file
    cookie_file.write("\n".join(cookie_content))
    cookie_file.close()

    # Cache the cookie file path for future use
    _cookie_file_cache[browser] = cookie_file.name

    rprint(f"[green]Bilibili cookies extracted and saved for reuse.[/green]")
    return cookie_file.name


def download_with_ytdlp(
    url: str,
    output_path: str = None,
    download_type: str = "audio",
    credentials=None,  # Keeping parameter for backward compatibility
    browser=None,
):
    """Download media from a Bilibili video using yt-dlp.

    Args:
        url: Bilibili video URL
        output_path: Output path (optional)
        download_type: 'audio', 'subtitles', or 'all'
        credentials: Deprecated, use browser parameter instead
        browser: Browser to extract cookies from (e.g., 'chrome', 'firefox')
    """
    cmd = ["yt-dlp"]

    # Skip actual video/audio download if only subtitles are requested
    if download_type == "subtitles":
        cmd.append("--skip-download")

    # Add format specification based on download type
    if download_type in ["audio", "all"]:
        cmd.extend(["-f", "ba"])

    # Add subtitles option if requested
    if download_type in ["subtitles", "all"]:
        cmd.extend(["--write-subs", "--write-auto-subs", "--sub-langs", "all"])

    # Handle authentication - use cached cookie file for browser
    if browser:
        # Get cookie file from cache, extracting it only once if needed
        cookie_file = get_browser_cookies(browser)
        if cookie_file:
            cmd.extend(["--cookies", cookie_file])
            rprint(
                f"[cyan]Using cached cookies from {browser} browser for authentication[/cyan]"
            )
        else:
            rprint(
                f"[yellow]Warning: No cookies found for {browser}. Download may fail if authentication is required.[/yellow]"
            )
    elif credentials:
        # Legacy warning
        rprint(
            "[yellow]Warning: The credentials parameter is deprecated, please use --browser instead[/yellow]"
        )

    # Add URL and output template if specified
    cmd.append(url)
    if output_path:
        cmd.extend(["-o", output_path])

    # Add verbose output for debugging
    cmd.append("-v")

    # Run the command
    try:
        rprint(f"[cyan]Running yt-dlp command: {' '.join(cmd)}[/cyan]")
        subprocess.run(cmd, check=True)

        # Provide more specific success message based on download type
        if download_type == "subtitles":
            rprint(f"[green]Subtitle download complete.[/green]")
        elif download_type == "audio":
            rprint(f"[green]Audio download complete.[/green]")
        else:
            rprint(f"[green]All requested content download complete.[/green]")
    except subprocess.CalledProcessError as e:
        # Provide more context in error messages to help debugging
        if download_type == "subtitles" and not browser:
            rprint(
                f"[red]yt-dlp subtitle download failed. You might need authentication with --browser.[/red]"
            )
        elif download_type == "audio" and not browser:
            rprint(
                f"[red]yt-dlp audio download failed. You might need authentication with --browser.[/red]"
            )
        else:
            rprint(f"[red]yt-dlp download failed with error code {e.returncode}[/red]")
        raise
